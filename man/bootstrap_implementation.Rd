% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootstrap_implementation.R
\name{bootstrap_implementation}
\alias{bootstrap_implementation}
\title{Description of bootstrap_implementation.R.
A function to estimate the univariate functional data/multivariate functional data
with bootstrap functional principal component analysis.}
\usage{
bootstrap_implementation(
  bootstrap_times = 100,
  argval,
  true_data,
  sparse_data,
  confid_alpha = 0.05
)
}
\arguments{
\item{bootstrap_times}{Bootstrap times. By default, it is 100.}

\item{argval}{A list of numeric vectors or a single numeric vector, giving the sampling points in the domains. It has the same
definition as in the funData function in the package "funData".}

\item{true_data}{If data is a simulated functional data, true_data is a list of p (the number of variables), and each sublist is a matrix
with n (the number of observations) rows and length(argval) columns. If data comes from the real data with missing values, then true_data = NULL.
By default, true_data = NULL.}

\item{sparse_data}{sparse_data is a list of p (the number of variables), and each sublist is a matrix
with n (the number of observations) rows and length(argval) columns. NA is allowed in each sublist.}

\item{confid_alpha}{represents the level of significance or the probability of making a Type I error. By default, confid_alpha = 0.05.}
}
\value{
The result is a list of 3 elements.
1. fit. This is the same data structure as the sparse_data in the argument.
2. sample_index. This is the sampling index from the population. If isbootstrap = False, sample_index is 1:n. Otherwise, it is the random sampling from
the population with replacement.
3. mrse: is the summation of square of residuals / summation of square of the original data.
}
\description{
Description of bootstrap_implementation.R.
A function to estimate the univariate functional data/multivariate functional data
with bootstrap functional principal component analysis.
}
\examples{
library(refund); list("cd4"); argval <- -18:42;
bootstrap_cd4 <- bootstrap_implementation(bootstrap_times = 1, argval = -18:42, true_data = NULL, sparse_data = cd4, confid_alpha = 0.05)
library(fda)
canada_temp <- t(CanadianWeather$monthlyTemp) ## a matrix of 35 stations and 12 months
canada_precip <- t(CanadianWeather$monthlyPrecip) ## a matrix of 35 stations and 12 months
true_data <- list(temp = canada_temp, precip = canada_precip);
n <- nrow(canada_temp); nt <- ncol(canada_temp); missing_prob <- 0.3; argval <- 1:12
random_matrix <- matrix(runif(n * nt), nrow = n, ncol = nt)
missing_mask <- random_matrix <= missing_prob
sparse_data <- lapply(true_data, function(k) {
 k[missing_mask] <- NA
 return(k)
})
bt_canada <- bootstrap_implementation(bootstrap_times = 1, argval, true_data, sparse_data, confid_alpha = 0.05)
}
